
mysql -u DbMysql19 -p 'DbMysql19' -h mysqlsrv1.cs.tau.ac.il -D DbMysql19
drop table movie_ratings, actors_movies, movies, actors, users;
source ../CREATE-DB-SCRIPT.sql

choose a front end farmework and create a test application
for vanilla JS look at bootstrap
decide if doing one page application or multi-page

set up db - create tables (bonus - with info)


APIs:

/movie_names - for autocomplete
    input: {text=""}
    output: [
    {title:"",
    id:0}
    ......
    ]

/ - home page, should return the html for the inital page

/random_rating:
    returns {
    title="",
    rating="",
    comment=""
    }

/staff_pick
    returns {
     title="Frozen",
     wiki_name="frozen (2013 film)",
     wiki_link="https://en.wikipedia.org/wiki/Frozen_(2013_film)",
     image="./images/frozen.jpg"
     summary="blablabla"
    }

/user_rated?n=20
/imdb_rated?n=20
    returns the n top rated movies
    [
    {title="",
    id="",
    rank=0,
    rating=4.8}
    .....
    ]

/recommendation?movie1=23&movie2=54&movie3=65
    returns {
    title="",
    id=0,
    summary="",
    ratings={
        user=avg_score,
        IMDB=avg_score,
        RT=avg_score
        }
    }

/movie/<movie_id>/info
    same as recommendation

/movie/<movie_id>/comments?n=5
    ???


/genres_popularity
/actors_popularity
    returns a list of dicts - dict(name:string, avg_rating:float, rank:int)

/movies_with_most_user_ratings
    returns a list of dicts - dict(title:string, num_ratings:int, rank:int)

/movies_per_genre
    returns a list of dicts - dict(name:string, movie_count:int, rank:int)

/movies_per_year
    returns a list of dicts - dict(release_year:int, movie_count:int, rank:int)


#Dana:
#New DB
#Users who liked (list of movie titles)
#Annotations

#Edan and Dor:
#Fix searchbar (under page)
#put movie page in recommended

#Tamara:
#put movie page in recommended (after go)
#analytics
#front-end of users who liked
#make everything likable to movie page
